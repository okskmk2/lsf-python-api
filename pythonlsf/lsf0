# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lsf', [dirname(__file__)])
        except ImportError:
            import _lsf
            return _lsf
        if fp is not None:
            try:
                _mod = imp.load_module('_lsf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lsf = swig_import_helper()
    del swig_import_helper
else:
    import _lsf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def fopen(*args):
  return _lsf.fopen(*args)
fopen = _lsf.fopen

def fclose(*args):
  return _lsf.fclose(*args)
fclose = _lsf.fclose

def new_intp():
  return _lsf.new_intp()
new_intp = _lsf.new_intp

def copy_intp(*args):
  return _lsf.copy_intp(*args)
copy_intp = _lsf.copy_intp

def delete_intp(*args):
  return _lsf.delete_intp(*args)
delete_intp = _lsf.delete_intp

def intp_assign(*args):
  return _lsf.intp_assign(*args)
intp_assign = _lsf.intp_assign

def intp_value(*args):
  return _lsf.intp_value(*args)
intp_value = _lsf.intp_value

def new_floatp():
  return _lsf.new_floatp()
new_floatp = _lsf.new_floatp

def copy_floatp(*args):
  return _lsf.copy_floatp(*args)
copy_floatp = _lsf.copy_floatp

def delete_floatp(*args):
  return _lsf.delete_floatp(*args)
delete_floatp = _lsf.delete_floatp

def floatp_assign(*args):
  return _lsf.floatp_assign(*args)
floatp_assign = _lsf.floatp_assign

def floatp_value(*args):
  return _lsf.floatp_value(*args)
floatp_value = _lsf.floatp_value

def new_longp():
  return _lsf.new_longp()
new_longp = _lsf.new_longp

def copy_longp(*args):
  return _lsf.copy_longp(*args)
copy_longp = _lsf.copy_longp

def delete_longp(*args):
  return _lsf.delete_longp(*args)
delete_longp = _lsf.delete_longp

def longp_assign(*args):
  return _lsf.longp_assign(*args)
longp_assign = _lsf.longp_assign

def longp_value(*args):
  return _lsf.longp_value(*args)
longp_value = _lsf.longp_value

def new_LS_LONG_INT_POINTER():
  return _lsf.new_LS_LONG_INT_POINTER()
new_LS_LONG_INT_POINTER = _lsf.new_LS_LONG_INT_POINTER

def copy_LS_LONG_INT_POINTER(*args):
  return _lsf.copy_LS_LONG_INT_POINTER(*args)
copy_LS_LONG_INT_POINTER = _lsf.copy_LS_LONG_INT_POINTER

def delete_LS_LONG_INT_POINTER(*args):
  return _lsf.delete_LS_LONG_INT_POINTER(*args)
delete_LS_LONG_INT_POINTER = _lsf.delete_LS_LONG_INT_POINTER

def LS_LONG_INT_POINTER_assign(*args):
  return _lsf.LS_LONG_INT_POINTER_assign(*args)
LS_LONG_INT_POINTER_assign = _lsf.LS_LONG_INT_POINTER_assign

def LS_LONG_INT_POINTER_value(*args):
  return _lsf.LS_LONG_INT_POINTER_value(*args)
LS_LONG_INT_POINTER_value = _lsf.LS_LONG_INT_POINTER_value

def new_intArray(*args):
  return _lsf.new_intArray(*args)
new_intArray = _lsf.new_intArray

def delete_intArray(*args):
  return _lsf.delete_intArray(*args)
delete_intArray = _lsf.delete_intArray

def intArray_getitem(*args):
  return _lsf.intArray_getitem(*args)
intArray_getitem = _lsf.intArray_getitem

def intArray_setitem(*args):
  return _lsf.intArray_setitem(*args)
intArray_setitem = _lsf.intArray_setitem

def new_floatArray(*args):
  return _lsf.new_floatArray(*args)
new_floatArray = _lsf.new_floatArray

def delete_floatArray(*args):
  return _lsf.delete_floatArray(*args)
delete_floatArray = _lsf.delete_floatArray

def floatArray_getitem(*args):
  return _lsf.floatArray_getitem(*args)
floatArray_getitem = _lsf.floatArray_getitem

def floatArray_setitem(*args):
  return _lsf.floatArray_setitem(*args)
floatArray_setitem = _lsf.floatArray_setitem

def new_stringArray(*args):
  return _lsf.new_stringArray(*args)
new_stringArray = _lsf.new_stringArray

def delete_stringArray(*args):
  return _lsf.delete_stringArray(*args)
delete_stringArray = _lsf.delete_stringArray

def stringArray_getitem(*args):
  return _lsf.stringArray_getitem(*args)
stringArray_getitem = _lsf.stringArray_getitem

def stringArray_setitem(*args):
  return _lsf.stringArray_setitem(*args)
stringArray_setitem = _lsf.stringArray_setitem

def new_dependJobsArray(*args):
  return _lsf.new_dependJobsArray(*args)
new_dependJobsArray = _lsf.new_dependJobsArray

def delete_dependJobsArray(*args):
  return _lsf.delete_dependJobsArray(*args)
delete_dependJobsArray = _lsf.delete_dependJobsArray

def dependJobsArray_getitem(*args):
  return _lsf.dependJobsArray_getitem(*args)
dependJobsArray_getitem = _lsf.dependJobsArray_getitem

def dependJobsArray_setitem(*args):
  return _lsf.dependJobsArray_setitem(*args)
dependJobsArray_setitem = _lsf.dependJobsArray_setitem

def new_longArray(*args):
  return _lsf.new_longArray(*args)
new_longArray = _lsf.new_longArray

def delete_longArray(*args):
  return _lsf.delete_longArray(*args)
delete_longArray = _lsf.delete_longArray

def longArray_getitem(*args):
  return _lsf.longArray_getitem(*args)
longArray_getitem = _lsf.longArray_getitem

def longArray_setitem(*args):
  return _lsf.longArray_setitem(*args)
longArray_setitem = _lsf.longArray_setitem

def char_p_p_to_pylist(*args):
  return _lsf.char_p_p_to_pylist(*args)
char_p_p_to_pylist = _lsf.char_p_p_to_pylist

def string_array_to_pylist(*args):
  return _lsf.string_array_to_pylist(*args)
string_array_to_pylist = _lsf.string_array_to_pylist
class queueInfoEntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, queueInfoEntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, queueInfoEntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsf.new_queueInfoEntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_queueInfoEntArray
    __del__ = lambda self : None
    def __getitem__(self, *args): return _lsf.queueInfoEntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsf.queueInfoEntArray___setitem__(self, *args)
    def cast(self): return _lsf.queueInfoEntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsf.queueInfoEntArray_frompointer
    if _newclass:frompointer = staticmethod(_lsf.queueInfoEntArray_frompointer)
queueInfoEntArray_swigregister = _lsf.queueInfoEntArray_swigregister
queueInfoEntArray_swigregister(queueInfoEntArray)

def queueInfoEntArray_frompointer(*args):
  return _lsf.queueInfoEntArray_frompointer(*args)
queueInfoEntArray_frompointer = _lsf.queueInfoEntArray_frompointer

class groupInfoEntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, groupInfoEntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, groupInfoEntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsf.new_groupInfoEntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_groupInfoEntArray
    __del__ = lambda self : None
    def __getitem__(self, *args): return _lsf.groupInfoEntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsf.groupInfoEntArray___setitem__(self, *args)
    def cast(self): return _lsf.groupInfoEntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsf.groupInfoEntArray_frompointer
    if _newclass:frompointer = staticmethod(_lsf.groupInfoEntArray_frompointer)
groupInfoEntArray_swigregister = _lsf.groupInfoEntArray_swigregister
groupInfoEntArray_swigregister(groupInfoEntArray)

def groupInfoEntArray_frompointer(*args):
  return _lsf.groupInfoEntArray_frompointer(*args)
groupInfoEntArray_frompointer = _lsf.groupInfoEntArray_frompointer

class userInfoEntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, userInfoEntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, userInfoEntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsf.new_userInfoEntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_userInfoEntArray
    __del__ = lambda self : None
    def __getitem__(self, *args): return _lsf.userInfoEntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsf.userInfoEntArray___setitem__(self, *args)
    def cast(self): return _lsf.userInfoEntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsf.userInfoEntArray_frompointer
    if _newclass:frompointer = staticmethod(_lsf.userInfoEntArray_frompointer)
userInfoEntArray_swigregister = _lsf.userInfoEntArray_swigregister
userInfoEntArray_swigregister(userInfoEntArray)

def userInfoEntArray_frompointer(*args):
  return _lsf.userInfoEntArray_frompointer(*args)
userInfoEntArray_frompointer = _lsf.userInfoEntArray_frompointer

class hostInfoEntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hostInfoEntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hostInfoEntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsf.new_hostInfoEntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_hostInfoEntArray
    __del__ = lambda self : None
    def __getitem__(self, *args): return _lsf.hostInfoEntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsf.hostInfoEntArray___setitem__(self, *args)
    def cast(self): return _lsf.hostInfoEntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsf.hostInfoEntArray_frompointer
    if _newclass:frompointer = staticmethod(_lsf.hostInfoEntArray_frompointer)
hostInfoEntArray_swigregister = _lsf.hostInfoEntArray_swigregister
hostInfoEntArray_swigregister(hostInfoEntArray)

def hostInfoEntArray_frompointer(*args):
  return _lsf.hostInfoEntArray_frompointer(*args)
hostInfoEntArray_frompointer = _lsf.hostInfoEntArray_frompointer

class hostLoadArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hostLoadArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hostLoadArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsf.new_hostLoadArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_hostLoadArray
    __del__ = lambda self : None
    def __getitem__(self, *args): return _lsf.hostLoadArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsf.hostLoadArray___setitem__(self, *args)
    def cast(self): return _lsf.hostLoadArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsf.hostLoadArray_frompointer
    if _newclass:frompointer = staticmethod(_lsf.hostLoadArray_frompointer)
hostLoadArray_swigregister = _lsf.hostLoadArray_swigregister
hostLoadArray_swigregister(hostLoadArray)

def hostLoadArray_frompointer(*args):
  return _lsf.hostLoadArray_frompointer(*args)
hostLoadArray_frompointer = _lsf.hostLoadArray_frompointer

PASSWD_FILE_LS = _lsf.PASSWD_FILE_LS
PASSWORD_LEN = _lsf.PASSWORD_LEN
LS_LONG_FORMAT = _lsf.LS_LONG_FORMAT
LS_UNS_LONG_FORMAT = _lsf.LS_UNS_LONG_FORMAT
INVALID_SOCKET = _lsf.INVALID_SOCKET
_VERSION_STR_ = _lsf._VERSION_STR_
_VERSION_PLATFORM_STR_ = _lsf._VERSION_PLATFORM_STR_
_WORKGROUP_STR_ = _lsf._WORKGROUP_STR_
_MINOR_STR_ = _lsf._MINOR_STR_
_FOURTH_STR_ = _lsf._FOURTH_STR_
_BUILD_STR_ = _lsf._BUILD_STR_
_NOTE_STR_ = _lsf._NOTE_STR_
_HOTFIX_STR_ = _lsf._HOTFIX_STR_
_OS_STR_ = _lsf._OS_STR_
LSF_XDR_VERSION2_0 = _lsf.LSF_XDR_VERSION2_0
LSF_XDR_VERSION2_1 = _lsf.LSF_XDR_VERSION2_1
LSF_XDR_VERSION2_2 = _lsf.LSF_XDR_VERSION2_2
LSF_XDR_VERSION3_0 = _lsf.LSF_XDR_VERSION3_0
LSF_XDR_VERSION3_1 = _lsf.LSF_XDR_VERSION3_1
LSF_XDR_VERSION3_2 = _lsf.LSF_XDR_VERSION3_2
LSF_XDR_VERSION3_2_2 = _lsf.LSF_XDR_VERSION3_2_2
LSF_XDR_VERSION4_0 = _lsf.LSF_XDR_VERSION4_0
LSF_XDR_VERSION4_1 = _lsf.LSF_XDR_VERSION4_1
LSF_XDR_VERSION4_2 = _lsf.LSF_XDR_VERSION4_2
LSF_XDR_VERSION5_0 = _lsf.LSF_XDR_VERSION5_0
LSF_XDR_VERSION5_1 = _lsf.LSF_XDR_VERSION5_1
LSF_XDR_VERSION6_0 = _lsf.LSF_XDR_VERSION6_0
LSF_XDR_VERSION6_1 = _lsf.LSF_XDR_VERSION6_1
LSF_XDR_VERSION6_2 = _lsf.LSF_XDR_VERSION6_2
EGO_XDR_VERSION_1_1 = _lsf.EGO_XDR_VERSION_1_1
LSF_XDR_VERSION7_0 = _lsf.LSF_XDR_VERSION7_0
EGO_XDR_VERSION_1_2 = _lsf.EGO_XDR_VERSION_1_2
LSF_XDR_VERSION7_0_EP1 = _lsf.LSF_XDR_VERSION7_0_EP1
LSF_XDR_VERSION7_0_EP2 = _lsf.LSF_XDR_VERSION7_0_EP2
LSF_XDR_VERSION7_0_EP3 = _lsf.LSF_XDR_VERSION7_0_EP3
LSF_XDR_VERSION7_0_EP4 = _lsf.LSF_XDR_VERSION7_0_EP4
LSF_XDR_VERSION7_0_EP5 = _lsf.LSF_XDR_VERSION7_0_EP5
LSF_XDR_VERSION7_0_EP6 = _lsf.LSF_XDR_VERSION7_0_EP6
LSF_XDR_VERSION8_0 = _lsf.LSF_XDR_VERSION8_0
LSF_XDR_VERSION8_0_2 = _lsf.LSF_XDR_VERSION8_0_2
LSF_XDR_VERSION9_1 = _lsf.LSF_XDR_VERSION9_1
LSF_XDR_VERSION9_1_1 = _lsf.LSF_XDR_VERSION9_1_1
LSF_XDR_VERSION9_1_1_1 = _lsf.LSF_XDR_VERSION9_1_1_1
LSF_XDR_VERSION9_1_2 = _lsf.LSF_XDR_VERSION9_1_2
LSF_XDR_VERSION9_1_3 = _lsf.LSF_XDR_VERSION9_1_3
LSF_XDR_VERSION9_2 = _lsf.LSF_XDR_VERSION9_2
EGO_XDR_VERSION_1_2_2 = _lsf.EGO_XDR_VERSION_1_2_2
EGO_XDR_VERSION_1_2_3 = _lsf.EGO_XDR_VERSION_1_2_3
EGO_XDR_VERSION_1_2_4 = _lsf.EGO_XDR_VERSION_1_2_4
EGO_XDR_VERSION_1_2_5 = _lsf.EGO_XDR_VERSION_1_2_5
EGO_XDR_VERSION_1_2_6 = _lsf.EGO_XDR_VERSION_1_2_6
EGO_XDR_VERSION_1_2_7 = _lsf.EGO_XDR_VERSION_1_2_7
EGO_XDR_VERSION_1_2_10 = _lsf.EGO_XDR_VERSION_1_2_10
EGO_XDR_VERSION_2_0 = _lsf.EGO_XDR_VERSION_2_0
EGO_XDR_VERSION_3_1 = _lsf.EGO_XDR_VERSION_3_1
LSF_XDR_VERSION10_1 = _lsf.LSF_XDR_VERSION10_1
EGO_XDR_VERSION_3_2 = _lsf.EGO_XDR_VERSION_3_2
LSF_XDR_V706_RV0_1 = _lsf.LSF_XDR_V706_RV0_1
LSF_XDR_V706_RV0_2 = _lsf.LSF_XDR_V706_RV0_2
EGO_XDR_VERSION = _lsf.EGO_XDR_VERSION

def isLSFPlatformCompatible():
  return _lsf.isLSFPlatformCompatible()
isLSFPlatformCompatible = _lsf.isLSFPlatformCompatible
LSF_DEFAULT_SOCKS = _lsf.LSF_DEFAULT_SOCKS
MAXLINELEN = _lsf.MAXLINELEN
MAXLSFNAMELEN = _lsf.MAXLSFNAMELEN
MAXLSFNAMELEN_70_EP1 = _lsf.MAXLSFNAMELEN_70_EP1
MAXSRES = _lsf.MAXSRES
MAXRESDESLEN = _lsf.MAXRESDESLEN
NBUILTINDEX = _lsf.NBUILTINDEX
MAXTYPES = _lsf.MAXTYPES
MAXMODELS = _lsf.MAXMODELS
MAXMODELS_70 = _lsf.MAXMODELS_70
MAXTYPES_31 = _lsf.MAXTYPES_31
MAXMODELS_31 = _lsf.MAXMODELS_31
MAXFILENAMELEN = _lsf.MAXFILENAMELEN
MAXEVARS = _lsf.MAXEVARS
GENMALLOCPACE = _lsf.GENMALLOCPACE
MAXLOGCLASSLEN = _lsf.MAXLOGCLASSLEN
FIRST_RES_SOCK = _lsf.FIRST_RES_SOCK
R15S = _lsf.R15S
R1M = _lsf.R1M
R15M = _lsf.R15M
UT = _lsf.UT
PG = _lsf.PG
IO = _lsf.IO
LS = _lsf.LS
IT = _lsf.IT
TMP = _lsf.TMP
SWP = _lsf.SWP
MEM = _lsf.MEM
USR1 = _lsf.USR1
USR2 = _lsf.USR2
INFINIT_INT = _lsf.INFINIT_INT
INFINIT_LONG_INT = _lsf.INFINIT_LONG_INT
INFINIT_SHORT = _lsf.INFINIT_SHORT
DEFAULT_RLIMIT = _lsf.DEFAULT_RLIMIT
LSF_RLIMIT_CPU = _lsf.LSF_RLIMIT_CPU
LSF_RLIMIT_FSIZE = _lsf.LSF_RLIMIT_FSIZE
LSF_RLIMIT_DATA = _lsf.LSF_RLIMIT_DATA
LSF_RLIMIT_STACK = _lsf.LSF_RLIMIT_STACK
LSF_RLIMIT_CORE = _lsf.LSF_RLIMIT_CORE
LSF_RLIMIT_RSS = _lsf.LSF_RLIMIT_RSS
LSF_RLIMIT_NOFILE = _lsf.LSF_RLIMIT_NOFILE
LSF_RLIMIT_OPEN_MAX = _lsf.LSF_RLIMIT_OPEN_MAX
LSF_RLIMIT_VMEM = _lsf.LSF_RLIMIT_VMEM
LSF_RLIMIT_SWAP = _lsf.LSF_RLIMIT_SWAP
LSF_RLIMIT_RUN = _lsf.LSF_RLIMIT_RUN
LSF_RLIMIT_PROCESS = _lsf.LSF_RLIMIT_PROCESS
LSF_RLIMIT_THREAD = _lsf.LSF_RLIMIT_THREAD
LSF_RLIM_NLIMITS = _lsf.LSF_RLIM_NLIMITS
LSF_RLIM_NLIMITS5_1 = _lsf.LSF_RLIM_NLIMITS5_1
LSF_NULL_MODE = _lsf.LSF_NULL_MODE
LSF_LOCAL_MODE = _lsf.LSF_LOCAL_MODE
LSF_REMOTE_MODE = _lsf.LSF_REMOTE_MODE
RF_MAXHOSTS = _lsf.RF_MAXHOSTS
RF_CMD_MAXHOSTS = _lsf.RF_CMD_MAXHOSTS
RF_CMD_RXFLAGS = _lsf.RF_CMD_RXFLAGS
STATUS_TIMEOUT = _lsf.STATUS_TIMEOUT
STATUS_IOERR = _lsf.STATUS_IOERR
STATUS_EXCESS = _lsf.STATUS_EXCESS
STATUS_REX_NOMEM = _lsf.STATUS_REX_NOMEM
STATUS_REX_FATAL = _lsf.STATUS_REX_FATAL
STATUS_REX_CWD = _lsf.STATUS_REX_CWD
STATUS_REX_PTY = _lsf.STATUS_REX_PTY
STATUS_REX_SP = _lsf.STATUS_REX_SP
STATUS_REX_FORK = _lsf.STATUS_REX_FORK
STATUS_REX_AFS = _lsf.STATUS_REX_AFS
STATUS_REX_UNKNOWN = _lsf.STATUS_REX_UNKNOWN
STATUS_REX_NOVCL = _lsf.STATUS_REX_NOVCL
STATUS_REX_NOSYM = _lsf.STATUS_REX_NOSYM
STATUS_REX_VCL_INIT = _lsf.STATUS_REX_VCL_INIT
STATUS_REX_VCL_SPAWN = _lsf.STATUS_REX_VCL_SPAWN
STATUS_REX_EXEC = _lsf.STATUS_REX_EXEC
STATUS_REX_MLS_INVAL = _lsf.STATUS_REX_MLS_INVAL
STATUS_REX_MLS_CLEAR = _lsf.STATUS_REX_MLS_CLEAR
STATUS_REX_MLS_RHOST = _lsf.STATUS_REX_MLS_RHOST
STATUS_REX_MLS_DOMIN = _lsf.STATUS_REX_MLS_DOMIN
STATUS_DENIED = _lsf.STATUS_DENIED
REXF_USEPTY = _lsf.REXF_USEPTY
REXF_CLNTDIR = _lsf.REXF_CLNTDIR
REXF_TASKPORT = _lsf.REXF_TASKPORT
REXF_SHMODE = _lsf.REXF_SHMODE
REXF_TASKINFO = _lsf.REXF_TASKINFO
REXF_REQVCL = _lsf.REXF_REQVCL
REXF_SYNCNIOS = _lsf.REXF_SYNCNIOS
REXF_TTYASYNC = _lsf.REXF_TTYASYNC
REXF_STDERR = _lsf.REXF_STDERR
REXF_UNLINK_CHILD = _lsf.REXF_UNLINK_CHILD
REXF_DELETE_CHILD = _lsf.REXF_DELETE_CHILD
REXF_WRITE_ACCT = _lsf.REXF_WRITE_ACCT
REXF_CHILD_SIGKILL = _lsf.REXF_CHILD_SIGKILL
REXF_CONTAINER_SIGKILL = _lsf.REXF_CONTAINER_SIGKILL
EXACT = _lsf.EXACT
OK_ONLY = _lsf.OK_ONLY
NORMALIZE = _lsf.NORMALIZE
LOCALITY = _lsf.LOCALITY
IGNORE_RES = _lsf.IGNORE_RES
LOCAL_ONLY = _lsf.LOCAL_ONLY
DFT_FROMTYPE = _lsf.DFT_FROMTYPE
ALL_CLUSTERS = _lsf.ALL_CLUSTERS
EFFECTIVE = _lsf.EFFECTIVE
RECV_FROM_CLUSTERS = _lsf.RECV_FROM_CLUSTERS
NEED_MY_CLUSTER_NAME = _lsf.NEED_MY_CLUSTER_NAME
SEND_TO_CLUSTERS = _lsf.SEND_TO_CLUSTERS
NO_SORT = _lsf.NO_SORT
EXCLUSIVE_RESOURCE = _lsf.EXCLUSIVE_RESOURCE
DT_CLUSTER_LOAD = _lsf.DT_CLUSTER_LOAD
AC_JOB_VM_IGN = _lsf.AC_JOB_VM_IGN
AC_HOST_IGN = _lsf.AC_HOST_IGN
GRID_BROKER = _lsf.GRID_BROKER
INCLUDE_EXPIRED = _lsf.INCLUDE_EXPIRED
REQ_FOR_LOCAL = _lsf.REQ_FOR_LOCAL
API_CALLER = _lsf.API_CALLER
FROM_MASTER = _lsf.FROM_MASTER
KEEPUID = _lsf.KEEPUID
RES_CMD_REBOOT = _lsf.RES_CMD_REBOOT
RES_CMD_SHUTDOWN = _lsf.RES_CMD_SHUTDOWN
RES_CMD_LOGON = _lsf.RES_CMD_LOGON
RES_CMD_LOGOFF = _lsf.RES_CMD_LOGOFF
LIM_CMD_REBOOT = _lsf.LIM_CMD_REBOOT
LIM_CMD_SHUTDOWN = _lsf.LIM_CMD_SHUTDOWN
LIM_CMD_REMOVEHOST = _lsf.LIM_CMD_REMOVEHOST
LIM_CMD_ACTIVATE = _lsf.LIM_CMD_ACTIVATE
LIM_CMD_DEACTIVATE = _lsf.LIM_CMD_DEACTIVATE
LIM_CMD_ELIM_ENV = _lsf.LIM_CMD_ELIM_ENV
class connectEnt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, connectEnt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, connectEnt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostname"] = _lsf.connectEnt_hostname_set
    __swig_getmethods__["hostname"] = _lsf.connectEnt_hostname_get
    if _newclass:hostname = _swig_property(_lsf.connectEnt_hostname_get, _lsf.connectEnt_hostname_set)
    __swig_setmethods__["csock"] = _lsf.connectEnt_csock_set
    __swig_getmethods__["csock"] = _lsf.connectEnt_csock_get
    if _newclass:csock = _swig_property(_lsf.connectEnt_csock_get, _lsf.connectEnt_csock_set)
    def __init__(self): 
        this = _lsf.new_connectEnt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_connectEnt
    __del__ = lambda self : None
connectEnt_swigregister = _lsf.connectEnt_swigregister
connectEnt_swigregister(connectEnt)

INTEGER_BITS = _lsf.INTEGER_BITS
LIM_UNAVAIL = _lsf.LIM_UNAVAIL
LIM_LOCKEDU = _lsf.LIM_LOCKEDU
LIM_LOCKEDW = _lsf.LIM_LOCKEDW
LIM_BUSY = _lsf.LIM_BUSY
LIM_RESDOWN = _lsf.LIM_RESDOWN
LIM_UNLICENSED = _lsf.LIM_UNLICENSED
LIM_SBDDOWN = _lsf.LIM_SBDDOWN
LIM_LOCKEDM = _lsf.LIM_LOCKEDM
LIM_OK_MASK = _lsf.LIM_OK_MASK
LIM_PEMDOWN = _lsf.LIM_PEMDOWN
LIM_EXPIRED = _lsf.LIM_EXPIRED
LIM_ACOK = _lsf.LIM_ACOK
LIM_RLAUP = _lsf.LIM_RLAUP
LIM_LOCKEDU_RMS = _lsf.LIM_LOCKEDU_RMS
class placeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, placeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, placeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostName"] = _lsf.placeInfo_hostName_set
    __swig_getmethods__["hostName"] = _lsf.placeInfo_hostName_get
    if _newclass:hostName = _swig_property(_lsf.placeInfo_hostName_get, _lsf.placeInfo_hostName_set)
    __swig_setmethods__["numtask"] = _lsf.placeInfo_numtask_set
    __swig_getmethods__["numtask"] = _lsf.placeInfo_numtask_get
    if _newclass:numtask = _swig_property(_lsf.placeInfo_numtask_get, _lsf.placeInfo_numtask_set)
    def __init__(self): 
        this = _lsf.new_placeInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_placeInfo
    __del__ = lambda self : None
placeInfo_swigregister = _lsf.placeInfo_swigregister
placeInfo_swigregister(placeInfo)

class hostLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hostLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hostLoad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostName"] = _lsf.hostLoad_hostName_set
    __swig_getmethods__["hostName"] = _lsf.hostLoad_hostName_get
    if _newclass:hostName = _swig_property(_lsf.hostLoad_hostName_get, _lsf.hostLoad_hostName_set)
    __swig_setmethods__["status"] = _lsf.hostLoad_status_set
    __swig_getmethods__["status"] = _lsf.hostLoad_status_get
    if _newclass:status = _swig_property(_lsf.hostLoad_status_get, _lsf.hostLoad_status_set)
    __swig_setmethods__["li"] = _lsf.hostLoad_li_set
    __swig_getmethods__["li"] = _lsf.hostLoad_li_get
    if _newclass:li = _swig_property(_lsf.hostLoad_li_get, _lsf.hostLoad_li_set)
    def __init__(self): 
        this = _lsf.new_hostLoad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_hostLoad
    __del__ = lambda self : None
hostLoad_swigregister = _lsf.hostLoad_swigregister
hostLoad_swigregister(hostLoad)

LS_BOOLEAN = _lsf.LS_BOOLEAN
LS_NUMERIC = _lsf.LS_NUMERIC
LS_STRING = _lsf.LS_STRING
LS_DYNAMIC = _lsf.LS_DYNAMIC
LS_EXTERNAL = _lsf.LS_EXTERNAL
INCR = _lsf.INCR
DECR = _lsf.DECR
NA = _lsf.NA
RESF_BUILTIN = _lsf.RESF_BUILTIN
RESF_DYNAMIC = _lsf.RESF_DYNAMIC
RESF_GLOBAL = _lsf.RESF_GLOBAL
RESF_SHARED = _lsf.RESF_SHARED
RESF_LIC = _lsf.RESF_LIC
RESF_EXTERNAL = _lsf.RESF_EXTERNAL
RESF_RELEASE = _lsf.RESF_RELEASE
RESF_DEFINED_IN_RESOURCEMAP = _lsf.RESF_DEFINED_IN_RESOURCEMAP
RESF_NON_CONSUMABLE = _lsf.RESF_NON_CONSUMABLE
RESF_REDEFINABLE = _lsf.RESF_REDEFINABLE
RESF_ESRES = _lsf.RESF_ESRES
RESF_MEGA_CRITERIA = _lsf.RESF_MEGA_CRITERIA
RESF_APPEARS_IN_RESOURCEMAP = _lsf.RESF_APPEARS_IN_RESOURCEMAP
class resItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _lsf.resItem_name_set
    __swig_getmethods__["name"] = _lsf.resItem_name_get
    if _newclass:name = _swig_property(_lsf.resItem_name_get, _lsf.resItem_name_set)
    __swig_setmethods__["des"] = _lsf.resItem_des_set
    __swig_getmethods__["des"] = _lsf.resItem_des_get
    if _newclass:des = _swig_property(_lsf.resItem_des_get, _lsf.resItem_des_set)
    __swig_setmethods__["valueType"] = _lsf.resItem_valueType_set
    __swig_getmethods__["valueType"] = _lsf.resItem_valueType_get
    if _newclass:valueType = _swig_property(_lsf.resItem_valueType_get, _lsf.resItem_valueType_set)
    __swig_setmethods__["orderType"] = _lsf.resItem_orderType_set
    __swig_getmethods__["orderType"] = _lsf.resItem_orderType_get
    if _newclass:orderType = _swig_property(_lsf.resItem_orderType_get, _lsf.resItem_orderType_set)
    __swig_setmethods__["flags"] = _lsf.resItem_flags_set
    __swig_getmethods__["flags"] = _lsf.resItem_flags_get
    if _newclass:flags = _swig_property(_lsf.resItem_flags_get, _lsf.resItem_flags_set)
    __swig_setmethods__["interval"] = _lsf.resItem_interval_set
    __swig_getmethods__["interval"] = _lsf.resItem_interval_get
    if _newclass:interval = _swig_property(_lsf.resItem_interval_get, _lsf.resItem_interval_set)
    def __init__(self): 
        this = _lsf.new_resItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_resItem
    __del__ = lambda self : None
resItem_swigregister = _lsf.resItem_swigregister
resItem_swigregister(resItem)

class lsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nRes"] = _lsf.lsInfo_nRes_set
    __swig_getmethods__["nRes"] = _lsf.lsInfo_nRes_get
    if _newclass:nRes = _swig_property(_lsf.lsInfo_nRes_get, _lsf.lsInfo_nRes_set)
    __swig_setmethods__["resTable"] = _lsf.lsInfo_resTable_set
    __swig_getmethods__["resTable"] = _lsf.lsInfo_resTable_get
    if _newclass:resTable = _swig_property(_lsf.lsInfo_resTable_get, _lsf.lsInfo_resTable_set)
    __swig_setmethods__["nTypes"] = _lsf.lsInfo_nTypes_set
    __swig_getmethods__["nTypes"] = _lsf.lsInfo_nTypes_get
    if _newclass:nTypes = _swig_property(_lsf.lsInfo_nTypes_get, _lsf.lsInfo_nTypes_set)
    __swig_setmethods__["hostTypes"] = _lsf.lsInfo_hostTypes_set
    __swig_getmethods__["hostTypes"] = _lsf.lsInfo_hostTypes_get
    if _newclass:hostTypes = _swig_property(_lsf.lsInfo_hostTypes_get, _lsf.lsInfo_hostTypes_set)
    __swig_setmethods__["nModels"] = _lsf.lsInfo_nModels_set
    __swig_getmethods__["nModels"] = _lsf.lsInfo_nModels_get
    if _newclass:nModels = _swig_property(_lsf.lsInfo_nModels_get, _lsf.lsInfo_nModels_set)
    __swig_setmethods__["hostModels"] = _lsf.lsInfo_hostModels_set
    __swig_getmethods__["hostModels"] = _lsf.lsInfo_hostModels_get
    if _newclass:hostModels = _swig_property(_lsf.lsInfo_hostModels_get, _lsf.lsInfo_hostModels_set)
    __swig_setmethods__["hostArchs"] = _lsf.lsInfo_hostArchs_set
    __swig_getmethods__["hostArchs"] = _lsf.lsInfo_hostArchs_get
    if _newclass:hostArchs = _swig_property(_lsf.lsInfo_hostArchs_get, _lsf.lsInfo_hostArchs_set)
    __swig_setmethods__["modelRefs"] = _lsf.lsInfo_modelRefs_set
    __swig_getmethods__["modelRefs"] = _lsf.lsInfo_modelRefs_get
    if _newclass:modelRefs = _swig_property(_lsf.lsInfo_modelRefs_get, _lsf.lsInfo_modelRefs_set)
    __swig_setmethods__["cpuFactor"] = _lsf.lsInfo_cpuFactor_set
    __swig_getmethods__["cpuFactor"] = _lsf.lsInfo_cpuFactor_get
    if _newclass:cpuFactor = _swig_property(_lsf.lsInfo_cpuFactor_get, _lsf.lsInfo_cpuFactor_set)
    __swig_setmethods__["numIndx"] = _lsf.lsInfo_numIndx_set
    __swig_getmethods__["numIndx"] = _lsf.lsInfo_numIndx_get
    if _newclass:numIndx = _swig_property(_lsf.lsInfo_numIndx_get, _lsf.lsInfo_numIndx_set)
    __swig_setmethods__["numUsrIndx"] = _lsf.lsInfo_numUsrIndx_set
    __swig_getmethods__["numUsrIndx"] = _lsf.lsInfo_numUsrIndx_get
    if _newclass:numUsrIndx = _swig_property(_lsf.lsInfo_numUsrIndx_get, _lsf.lsInfo_numUsrIndx_set)
    def __init__(self): 
        this = _lsf.new_lsInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_lsInfo
    __del__ = lambda self : None
lsInfo_swigregister = _lsf.lsInfo_swigregister
lsInfo_swigregister(lsInfo)

CLUST_STAT_OK = _lsf.CLUST_STAT_OK
CLUST_STAT_UNAVAIL = _lsf.CLUST_STAT_UNAVAIL
CLUST_STAT_RECV_FROM = _lsf.CLUST_STAT_RECV_FROM
CLUST_STAT_SEND_TO = _lsf.CLUST_STAT_SEND_TO
class clusterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clusterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clusterInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clusterName"] = _lsf.clusterInfo_clusterName_set
    __swig_getmethods__["clusterName"] = _lsf.clusterInfo_clusterName_get
    if _newclass:clusterName = _swig_property(_lsf.clusterInfo_clusterName_get, _lsf.clusterInfo_clusterName_set)
    __swig_setmethods__["status"] = _lsf.clusterInfo_status_set
    __swig_getmethods__["status"] = _lsf.clusterInfo_status_get
    if _newclass:status = _swig_property(_lsf.clusterInfo_status_get, _lsf.clusterInfo_status_set)
    __swig_setmethods__["masterName"] = _lsf.clusterInfo_masterName_set
    __swig_getmethods__["masterName"] = _lsf.clusterInfo_masterName_get
    if _newclass:masterName = _swig_property(_lsf.clusterInfo_masterName_get, _lsf.clusterInfo_masterName_set)
    __swig_setmethods__["managerName"] = _lsf.clusterInfo_managerName_set
    __swig_getmethods__["managerName"] = _lsf.clusterInfo_managerName_get
    if _newclass:managerName = _swig_property(_lsf.clusterInfo_managerName_get, _lsf.clusterInfo_managerName_set)
    __swig_setmethods__["managerId"] = _lsf.clusterInfo_managerId_set
    __swig_getmethods__["managerId"] = _lsf.clusterInfo_managerId_get
    if _newclass:managerId = _swig_property(_lsf.clusterInfo_managerId_get, _lsf.clusterInfo_managerId_set)
    __swig_setmethods__["numServers"] = _lsf.clusterInfo_numServers_set
    __swig_getmethods__["numServers"] = _lsf.clusterInfo_numServers_get
    if _newclass:numServers = _swig_property(_lsf.clusterInfo_numServers_get, _lsf.clusterInfo_numServers_set)
    __swig_setmethods__["numClients"] = _lsf.clusterInfo_numClients_set
    __swig_getmethods__["numClients"] = _lsf.clusterInfo_numClients_get
    if _newclass:numClients = _swig_property(_lsf.clusterInfo_numClients_get, _lsf.clusterInfo_numClients_set)
    __swig_setmethods__["nRes"] = _lsf.clusterInfo_nRes_set
    __swig_getmethods__["nRes"] = _lsf.clusterInfo_nRes_get
    if _newclass:nRes = _swig_property(_lsf.clusterInfo_nRes_get, _lsf.clusterInfo_nRes_set)
    __swig_setmethods__["resources"] = _lsf.clusterInfo_resources_set
    __swig_getmethods__["resources"] = _lsf.clusterInfo_resources_get
    if _newclass:resources = _swig_property(_lsf.clusterInfo_resources_get, _lsf.clusterInfo_resources_set)
    __swig_setmethods__["nTypes"] = _lsf.clusterInfo_nTypes_set
    __swig_getmethods__["nTypes"] = _lsf.clusterInfo_nTypes_get
    if _newclass:nTypes = _swig_property(_lsf.clusterInfo_nTypes_get, _lsf.clusterInfo_nTypes_set)
    __swig_setmethods__["hostTypes"] = _lsf.clusterInfo_hostTypes_set
    __swig_getmethods__["hostTypes"] = _lsf.clusterInfo_hostTypes_get
    if _newclass:hostTypes = _swig_property(_lsf.clusterInfo_hostTypes_get, _lsf.clusterInfo_hostTypes_set)
    __swig_setmethods__["nModels"] = _lsf.clusterInfo_nModels_set
    __swig_getmethods__["nModels"] = _lsf.clusterInfo_nModels_get
    if _newclass:nModels = _swig_property(_lsf.clusterInfo_nModels_get, _lsf.clusterInfo_nModels_set)
    __swig_setmethods__["hostModels"] = _lsf.clusterInfo_hostModels_set
    __swig_getmethods__["hostModels"] = _lsf.clusterInfo_hostModels_get
    if _newclass:hostModels = _swig_property(_lsf.clusterInfo_hostModels_get, _lsf.clusterInfo_hostModels_set)
    __swig_setmethods__["nAdmins"] = _lsf.clusterInfo_nAdmins_set
    __swig_getmethods__["nAdmins"] = _lsf.clusterInfo_nAdmins_get
    if _newclass:nAdmins = _swig_property(_lsf.clusterInfo_nAdmins_get, _lsf.clusterInfo_nAdmins_set)
    __swig_setmethods__["adminIds"] = _lsf.clusterInfo_adminIds_set
    __swig_getmethods__["adminIds"] = _lsf.clusterInfo_adminIds_get
    if _newclass:adminIds = _swig_property(_lsf.clusterInfo_adminIds_get, _lsf.clusterInfo_adminIds_set)
    __swig_setmethods__["admins"] = _lsf.clusterInfo_admins_set
    __swig_getmethods__["admins"] = _lsf.clusterInfo_admins_get
    if _newclass:admins = _swig_property(_lsf.clusterInfo_admins_get, _lsf.clusterInfo_admins_set)
    __swig_setmethods__["analyzerLicFlag"] = _lsf.clusterInfo_analyzerLicFlag_set
    __swig_getmethods__["analyzerLicFlag"] = _lsf.clusterInfo_analyzerLicFlag_get
    if _newclass:analyzerLicFlag = _swig_property(_lsf.clusterInfo_analyzerLicFlag_get, _lsf.clusterInfo_analyzerLicFlag_set)
    __swig_setmethods__["jsLicFlag"] = _lsf.clusterInfo_jsLicFlag_set
    __swig_getmethods__["jsLicFlag"] = _lsf.clusterInfo_jsLicFlag_get
    if _newclass:jsLicFlag = _swig_property(_lsf.clusterInfo_jsLicFlag_get, _lsf.clusterInfo_jsLicFlag_set)
    __swig_setmethods__["afterHoursWindow"] = _lsf.clusterInfo_afterHoursWindow_set
    __swig_getmethods__["afterHoursWindow"] = _lsf.clusterInfo_afterHoursWindow_get
    if _newclass:afterHoursWindow = _swig_property(_lsf.clusterInfo_afterHoursWindow_get, _lsf.clusterInfo_afterHoursWindow_set)
    __swig_setmethods__["preferAuthName"] = _lsf.clusterInfo_preferAuthName_set
    __swig_getmethods__["preferAuthName"] = _lsf.clusterInfo_preferAuthName_get
    if _newclass:preferAuthName = _swig_property(_lsf.clusterInfo_preferAuthName_get, _lsf.clusterInfo_preferAuthName_set)
    __swig_setmethods__["inUseAuthName"] = _lsf.clusterInfo_inUseAuthName_set
    __swig_getmethods__["inUseAuthName"] = _lsf.clusterInfo_inUseAuthName_get
    if _newclass:inUseAuthName = _swig_property(_lsf.clusterInfo_inUseAuthName_get, _lsf.clusterInfo_inUseAuthName_set)
    def __init__(self): 
        this = _lsf.new_clusterInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_clusterInfo
    __del__ = lambda self : None
clusterInfo_swigregister = _lsf.clusterInfo_swigregister
clusterInfo_swigregister(clusterInfo)

XTYPE_ID_BITS = _lsf.XTYPE_ID_BITS
XKEY_ID_BITS = _lsf.XKEY_ID_BITS
XKEY_ID_MASK = _lsf.XKEY_ID_MASK
OBJTYPE_UNKNOWN = _lsf.OBJTYPE_UNKNOWN
OBJTYPE_CLUSTER = _lsf.OBJTYPE_CLUSTER
OBJTYPE_HOST = _lsf.OBJTYPE_HOST
OBJTYPE_NODE = _lsf.OBJTYPE_NODE
OBJTYPE_SOCKET = _lsf.OBJTYPE_SOCKET
OBJTYPE_CACHE = _lsf.OBJTYPE_CACHE
OBJTYPE_CORE = _lsf.OBJTYPE_CORE
OBJTYPE_PU = _lsf.OBJTYPE_PU
OBJTYPE_GROUP = _lsf.OBJTYPE_GROUP
OBJTYPE_BRIDGE = _lsf.OBJTYPE_BRIDGE
OBJTYPE_PCI_DEVICE = _lsf.OBJTYPE_PCI_DEVICE
OBJTYPE_LAST = _lsf.OBJTYPE_LAST
ATTR_KEY_UNKNOWN = _lsf.ATTR_KEY_UNKNOWN
ATTR_KEY_NAME = _lsf.ATTR_KEY_NAME
ATTR_KEY_FLAGS = _lsf.ATTR_KEY_FLAGS
ATTR_KEY_CACHE_SIZE = _lsf.ATTR_KEY_CACHE_SIZE
ATTR_KEY_NODE_ALLMEM = _lsf.ATTR_KEY_NODE_ALLMEM
ATTR_KEY_NODE_USED_MEM = _lsf.ATTR_KEY_NODE_USED_MEM
ATTR_KEY_CACHE_DEPTH = _lsf.ATTR_KEY_CACHE_DEPTH
ATTR_KEY_AFFINITY_BIND_ENABLE = _lsf.ATTR_KEY_AFFINITY_BIND_ENABLE
ATTR_KEY_NODE_INUSE = _lsf.ATTR_KEY_NODE_INUSE
ATTR_KEY_HOST_SUPPORT_AFFINITY = _lsf.ATTR_KEY_HOST_SUPPORT_AFFINITY
ATTR_KEY_AFFINITY_NODEID = _lsf.ATTR_KEY_AFFINITY_NODEID
ATTR_KEY_PCI_BUSID = _lsf.ATTR_KEY_PCI_BUSID
ATTR_KEY_AVAIL_GPU_NUM = _lsf.ATTR_KEY_AVAIL_GPU_NUM
ATTR_KEY_AVAIL_NODE_POS = _lsf.ATTR_KEY_AVAIL_NODE_POS
ATTR_KEY_LAST = _lsf.ATTR_KEY_LAST
XTYPE_UNKNOWN = _lsf.XTYPE_UNKNOWN
XTYPE_INT = _lsf.XTYPE_INT
XTYPE_UINT = _lsf.XTYPE_UINT
XTYPE_FLOAT = _lsf.XTYPE_FLOAT
XTYPE_LONG64 = _lsf.XTYPE_LONG64
XTYPE_STRING = _lsf.XTYPE_STRING
class xvalue_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xvalue_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xvalue_t, name)
    __repr__ = _swig_repr
    __swig_getmethods__["u"] = _lsf.xvalue_t_u_get
    if _newclass:u = _swig_property(_lsf.xvalue_t_u_get)
    def __init__(self): 
        this = _lsf.new_xvalue_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xvalue_t
    __del__ = lambda self : None
xvalue_t_swigregister = _lsf.xvalue_t_swigregister
xvalue_t_swigregister(xvalue_t)

class xvalue_t_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xvalue_t_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xvalue_t_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["intv"] = _lsf.xvalue_t_u_intv_set
    __swig_getmethods__["intv"] = _lsf.xvalue_t_u_intv_get
    if _newclass:intv = _swig_property(_lsf.xvalue_t_u_intv_get, _lsf.xvalue_t_u_intv_set)
    __swig_setmethods__["uintv"] = _lsf.xvalue_t_u_uintv_set
    __swig_getmethods__["uintv"] = _lsf.xvalue_t_u_uintv_get
    if _newclass:uintv = _swig_property(_lsf.xvalue_t_u_uintv_get, _lsf.xvalue_t_u_uintv_set)
    __swig_setmethods__["floatv"] = _lsf.xvalue_t_u_floatv_set
    __swig_getmethods__["floatv"] = _lsf.xvalue_t_u_floatv_get
    if _newclass:floatv = _swig_property(_lsf.xvalue_t_u_floatv_get, _lsf.xvalue_t_u_floatv_set)
    __swig_setmethods__["longv"] = _lsf.xvalue_t_u_longv_set
    __swig_getmethods__["longv"] = _lsf.xvalue_t_u_longv_get
    if _newclass:longv = _swig_property(_lsf.xvalue_t_u_longv_get, _lsf.xvalue_t_u_longv_set)
    __swig_setmethods__["stringv"] = _lsf.xvalue_t_u_stringv_set
    __swig_getmethods__["stringv"] = _lsf.xvalue_t_u_stringv_get
    if _newclass:stringv = _swig_property(_lsf.xvalue_t_u_stringv_get, _lsf.xvalue_t_u_stringv_set)
    def __init__(self): 
        this = _lsf.new_xvalue_t_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xvalue_t_u
    __del__ = lambda self : None
xvalue_t_u_swigregister = _lsf.xvalue_t_u_swigregister
xvalue_t_u_swigregister(xvalue_t_u)

class xdata_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xdata_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xdata_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xtype"] = _lsf.xdata_t_xtype_set
    __swig_getmethods__["xtype"] = _lsf.xdata_t_xtype_get
    if _newclass:xtype = _swig_property(_lsf.xdata_t_xtype_get, _lsf.xdata_t_xtype_set)
    __swig_setmethods__["xvalue"] = _lsf.xdata_t_xvalue_set
    __swig_getmethods__["xvalue"] = _lsf.xdata_t_xvalue_get
    if _newclass:xvalue = _swig_property(_lsf.xdata_t_xvalue_get, _lsf.xdata_t_xvalue_set)
    def __init__(self): 
        this = _lsf.new_xdata_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xdata_t
    __del__ = lambda self : None
xdata_t_swigregister = _lsf.xdata_t_swigregister
xdata_t_swigregister(xdata_t)

class xarray_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xarray_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xarray_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _lsf.xarray_t_count_set
    __swig_getmethods__["count"] = _lsf.xarray_t_count_get
    if _newclass:count = _swig_property(_lsf.xarray_t_count_get, _lsf.xarray_t_count_set)
    __swig_setmethods__["capacity"] = _lsf.xarray_t_capacity_set
    __swig_getmethods__["capacity"] = _lsf.xarray_t_capacity_get
    if _newclass:capacity = _swig_property(_lsf.xarray_t_capacity_get, _lsf.xarray_t_capacity_set)
    __swig_setmethods__["capdelta"] = _lsf.xarray_t_capdelta_set
    __swig_getmethods__["capdelta"] = _lsf.xarray_t_capdelta_get
    if _newclass:capdelta = _swig_property(_lsf.xarray_t_capdelta_get, _lsf.xarray_t_capdelta_set)
    __swig_setmethods__["datasz"] = _lsf.xarray_t_datasz_set
    __swig_getmethods__["datasz"] = _lsf.xarray_t_datasz_get
    if _newclass:datasz = _swig_property(_lsf.xarray_t_datasz_get, _lsf.xarray_t_datasz_set)
    __swig_setmethods__["data"] = _lsf.xarray_t_data_set
    __swig_getmethods__["data"] = _lsf.xarray_t_data_get
    if _newclass:data = _swig_property(_lsf.xarray_t_data_get, _lsf.xarray_t_data_set)
    __swig_setmethods__["objInit"] = _lsf.xarray_t_objInit_set
    __swig_getmethods__["objInit"] = _lsf.xarray_t_objInit_get
    if _newclass:objInit = _swig_property(_lsf.xarray_t_objInit_get, _lsf.xarray_t_objInit_set)
    __swig_setmethods__["objKill"] = _lsf.xarray_t_objKill_set
    __swig_getmethods__["objKill"] = _lsf.xarray_t_objKill_get
    if _newclass:objKill = _swig_property(_lsf.xarray_t_objKill_get, _lsf.xarray_t_objKill_set)
    def __init__(self): 
        this = _lsf.new_xarray_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xarray_t
    __del__ = lambda self : None
xarray_t_swigregister = _lsf.xarray_t_swigregister
xarray_t_swigregister(xarray_t)

class xattr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xattr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xattr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _lsf.xattr_t_key_set
    __swig_getmethods__["key"] = _lsf.xattr_t_key_get
    if _newclass:key = _swig_property(_lsf.xattr_t_key_get, _lsf.xattr_t_key_set)
    __swig_setmethods__["data"] = _lsf.xattr_t_data_set
    __swig_getmethods__["data"] = _lsf.xattr_t_data_get
    if _newclass:data = _swig_property(_lsf.xattr_t_data_get, _lsf.xattr_t_data_set)
    def __init__(self): 
        this = _lsf.new_xattr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xattr_t
    __del__ = lambda self : None
xattr_t_swigregister = _lsf.xattr_t_swigregister
xattr_t_swigregister(xattr_t)

class xtree_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xtree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xtree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xtype"] = _lsf.xtree_t_xtype_set
    __swig_getmethods__["xtype"] = _lsf.xtree_t_xtype_get
    if _newclass:xtype = _swig_property(_lsf.xtree_t_xtype_get, _lsf.xtree_t_xtype_set)
    __swig_setmethods__["xid"] = _lsf.xtree_t_xid_set
    __swig_getmethods__["xid"] = _lsf.xtree_t_xid_get
    if _newclass:xid = _swig_property(_lsf.xtree_t_xid_get, _lsf.xtree_t_xid_set)
    __swig_setmethods__["attrs"] = _lsf.xtree_t_attrs_set
    __swig_getmethods__["attrs"] = _lsf.xtree_t_attrs_get
    if _newclass:attrs = _swig_property(_lsf.xtree_t_attrs_get, _lsf.xtree_t_attrs_set)
    __swig_setmethods__["children"] = _lsf.xtree_t_children_set
    __swig_getmethods__["children"] = _lsf.xtree_t_children_get
    if _newclass:children = _swig_property(_lsf.xtree_t_children_get, _lsf.xtree_t_children_set)
    def __init__(self): 
        this = _lsf.new_xtree_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_xtree_t
    __del__ = lambda self : None
xtree_t_swigregister = _lsf.xtree_t_swigregister
xtree_t_swigregister(xtree_t)

BIND_OPT_LIM = _lsf.BIND_OPT_LIM
BIND_OPT_MBD = _lsf.BIND_OPT_MBD
BIND_OPT_MBSCHD = _lsf.BIND_OPT_MBSCHD
NONE_PROC_TAG = _lsf.NONE_PROC_TAG
MBD_PROC_TAG = _lsf.MBD_PROC_TAG
MBSCHD_PROC_TAG = _lsf.MBSCHD_PROC_TAG
LIM_PROC_TAG = _lsf.LIM_PROC_TAG
TAGID_MAIN = _lsf.TAGID_MAIN
TAGID_ESTDRV = _lsf.TAGID_ESTDRV
TAGID_CONN = _lsf.TAGID_CONN
TAGID_LOG = _lsf.TAGID_LOG
TAGID_ESTIMATOR = _lsf.TAGID_ESTIMATOR
TAGID_UDP = _lsf.TAGID_UDP
TAGID_OTHER = _lsf.TAGID_OTHER
MIN_REQUIRED_CORE_NUM = _lsf.MIN_REQUIRED_CORE_NUM
class cpuBindInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpuBindInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpuBindInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["daemon"] = _lsf.cpuBindInfo_t_daemon_set
    __swig_getmethods__["daemon"] = _lsf.cpuBindInfo_t_daemon_get
    if _newclass:daemon = _swig_property(_lsf.cpuBindInfo_t_daemon_get, _lsf.cpuBindInfo_t_daemon_set)
    __swig_setmethods__["tagId"] = _lsf.cpuBindInfo_t_tagId_set
    __swig_getmethods__["tagId"] = _lsf.cpuBindInfo_t_tagId_get
    if _newclass:tagId = _swig_property(_lsf.cpuBindInfo_t_tagId_get, _lsf.cpuBindInfo_t_tagId_set)
    __swig_setmethods__["ncpus"] = _lsf.cpuBindInfo_t_ncpus_set
    __swig_getmethods__["ncpus"] = _lsf.cpuBindInfo_t_ncpus_get
    if _newclass:ncpus = _swig_property(_lsf.cpuBindInfo_t_ncpus_get, _lsf.cpuBindInfo_t_ncpus_set)
    __swig_setmethods__["cpus"] = _lsf.cpuBindInfo_t_cpus_set
    __swig_getmethods__["cpus"] = _lsf.cpuBindInfo_t_cpus_get
    if _newclass:cpus = _swig_property(_lsf.cpuBindInfo_t_cpus_get, _lsf.cpuBindInfo_t_cpus_set)
    def __init__(self): 
        this = _lsf.new_cpuBindInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_cpuBindInfo_t
    __del__ = lambda self : None
cpuBindInfo_t_swigregister = _lsf.cpuBindInfo_t_swigregister
cpuBindInfo_t_swigregister(cpuBindInfo_t)

class cpuBindInfoList_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpuBindInfoList_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpuBindInfoList_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _lsf.cpuBindInfoList_t_num_set
    __swig_getmethods__["num"] = _lsf.cpuBindInfoList_t_num_get
    if _newclass:num = _swig_property(_lsf.cpuBindInfoList_t_num_get, _lsf.cpuBindInfoList_t_num_set)
    __swig_setmethods__["cpubindinfos"] = _lsf.cpuBindInfoList_t_cpubindinfos_set
    __swig_getmethods__["cpubindinfos"] = _lsf.cpuBindInfoList_t_cpubindinfos_get
    if _newclass:cpubindinfos = _swig_property(_lsf.cpuBindInfoList_t_cpubindinfos_get, _lsf.cpuBindInfoList_t_cpubindinfos_set)
    def __init__(self): 
        this = _lsf.new_cpuBindInfoList_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_cpuBindInfoList_t
    __del__ = lambda self : None
cpuBindInfoList_t_swigregister = _lsf.cpuBindInfoList_t_swigregister
cpuBindInfoList_t_swigregister(cpuBindInfoList_t)


def ls_bindinfo(*args):
  return _lsf.ls_bindinfo(*args)
ls_bindinfo = _lsf.ls_bindinfo

def cpuBindInfo2Env(*args):
  return _lsf.cpuBindInfo2Env(*args)
cpuBindInfo2Env = _lsf.cpuBindInfo2Env

def destroyCpuBindInfoList(*args):
  return _lsf.destroyCpuBindInfoList(*args)
destroyCpuBindInfoList = _lsf.destroyCpuBindInfoList
class hostInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hostInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hostInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostName"] = _lsf.hostInfo_hostName_set
    __swig_getmethods__["hostName"] = _lsf.hostInfo_hostName_get
    if _newclass:hostName = _swig_property(_lsf.hostInfo_hostName_get, _lsf.hostInfo_hostName_set)
    __swig_setmethods__["hostType"] = _lsf.hostInfo_hostType_set
    __swig_getmethods__["hostType"] = _lsf.hostInfo_hostType_get
    if _newclass:hostType = _swig_property(_lsf.hostInfo_hostType_get, _lsf.hostInfo_hostType_set)
    __swig_setmethods__["hostModel"] = _lsf.hostInfo_hostModel_set
    __swig_getmethods__["hostModel"] = _lsf.hostInfo_hostModel_get
    if _newclass:hostModel = _swig_property(_lsf.hostInfo_hostModel_get, _lsf.hostInfo_hostModel_set)
    __swig_setmethods__["cpuFactor"] = _lsf.hostInfo_cpuFactor_set
    __swig_getmethods__["cpuFactor"] = _lsf.hostInfo_cpuFactor_get
    if _newclass:cpuFactor = _swig_property(_lsf.hostInfo_cpuFactor_get, _lsf.hostInfo_cpuFactor_set)
    __swig_setmethods__["maxCpus"] = _lsf.hostInfo_maxCpus_set
    __swig_getmethods__["maxCpus"] = _lsf.hostInfo_maxCpus_get
    if _newclass:maxCpus = _swig_property(_lsf.hostInfo_maxCpus_get, _lsf.hostInfo_maxCpus_set)
    __swig_setmethods__["maxMem"] = _lsf.hostInfo_maxMem_set
    __swig_getmethods__["maxMem"] = _lsf.hostInfo_maxMem_get
    if _newclass:maxMem = _swig_property(_lsf.hostInfo_maxMem_get, _lsf.hostInfo_maxMem_set)
    __swig_setmethods__["maxSwap"] = _lsf.hostInfo_maxSwap_set
    __swig_getmethods__["maxSwap"] = _lsf.hostInfo_maxSwap_get
    if _newclass:maxSwap = _swig_property(_lsf.hostInfo_maxSwap_get, _lsf.hostInfo_maxSwap_set)
    __swig_setmethods__["maxTmp"] = _lsf.hostInfo_maxTmp_set
    __swig_getmethods__["maxTmp"] = _lsf.hostInfo_maxTmp_get
    if _newclass:maxTmp = _swig_property(_lsf.hostInfo_maxTmp_get, _lsf.hostInfo_maxTmp_set)
    __swig_setmethods__["nDisks"] = _lsf.hostInfo_nDisks_set
    __swig_getmethods__["nDisks"] = _lsf.hostInfo_nDisks_get
    if _newclass:nDisks = _swig_property(_lsf.hostInfo_nDisks_get, _lsf.hostInfo_nDisks_set)
    __swig_setmethods__["nRes"] = _lsf.hostInfo_nRes_set
    __swig_getmethods__["nRes"] = _lsf.hostInfo_nRes_get
    if _newclass:nRes = _swig_property(_lsf.hostInfo_nRes_get, _lsf.hostInfo_nRes_set)
    __swig_setmethods__["resources"] = _lsf.hostInfo_resources_set
    __swig_getmethods__["resources"] = _lsf.hostInfo_resources_get
    if _newclass:resources = _swig_property(_lsf.hostInfo_resources_get, _lsf.hostInfo_resources_set)
    __swig_setmethods__["nDRes"] = _lsf.hostInfo_nDRes_set
    __swig_getmethods__["nDRes"] = _lsf.hostInfo_nDRes_get
    if _newclass:nDRes = _swig_property(_lsf.hostInfo_nDRes_get, _lsf.hostInfo_nDRes_set)
    __swig_setmethods__["DResources"] = _lsf.hostInfo_DResources_set
    __swig_getmethods__["DResources"] = _lsf.hostInfo_DResources_get
    if _newclass:DResources = _swig_property(_lsf.hostInfo_DResources_get, _lsf.hostInfo_DResources_set)
    __swig_setmethods__["windows"] = _lsf.hostInfo_windows_set
    __swig_getmethods__["windows"] = _lsf.hostInfo_windows_get
    if _newclass:windows = _swig_property(_lsf.hostInfo_windows_get, _lsf.hostInfo_windows_set)
    __swig_setmethods__["numIndx"] = _lsf.hostInfo_numIndx_set
    __swig_getmethods__["numIndx"] = _lsf.hostInfo_numIndx_get
    if _newclass:numIndx = _swig_property(_lsf.hostInfo_numIndx_get, _lsf.hostInfo_numIndx_set)
    __swig_setmethods__["busyThreshold"] = _lsf.hostInfo_busyThreshold_set
    __swig_getmethods__["busyThreshold"] = _lsf.hostInfo_busyThreshold_get
    if _newclass:busyThreshold = _swig_property(_lsf.hostInfo_busyThreshold_get, _lsf.hostInfo_busyThreshold_set)
    __swig_setmethods__["isServer"] = _lsf.hostInfo_isServer_set
    __swig_getmethods__["isServer"] = _lsf.hostInfo_isServer_get
    if _newclass:isServer = _swig_property(_lsf.hostInfo_isServer_get, _lsf.hostInfo_isServer_set)
    __swig_setmethods__["licensed"] = _lsf.hostInfo_licensed_set
    __swig_getmethods__["licensed"] = _lsf.hostInfo_licensed_get
    if _newclass:licensed = _swig_property(_lsf.hostInfo_licensed_get, _lsf.hostInfo_licensed_set)
    __swig_setmethods__["rexPriority"] = _lsf.hostInfo_rexPriority_set
    __swig_getmethods__["rexPriority"] = _lsf.hostInfo_rexPriority_get
    if _newclass:rexPriority = _swig_property(_lsf.hostInfo_rexPriority_get, _lsf.hostInfo_rexPriority_set)
    __swig_setmethods__["licFeaturesNeeded"] = _lsf.hostInfo_licFeaturesNeeded_set
    __swig_getmethods__["licFeaturesNeeded"] = _lsf.hostInfo_licFeaturesNeeded_get
    if _newclass:licFeaturesNeeded = _swig_property(_lsf.hostInfo_licFeaturesNeeded_get, _lsf.hostInfo_licFeaturesNeeded_set)
    __swig_setmethods__["licClass"] = _lsf.hostInfo_licClass_set
    __swig_getmethods__["licClass"] = _lsf.hostInfo_licClass_get
    if _newclass:licClass = _swig_property(_lsf.hostInfo_licClass_get, _lsf.hostInfo_licClass_set)
    __swig_setmethods__["cores"] = _lsf.hostInfo_cores_set
    __swig_getmethods__["cores"] = _lsf.hostInfo_cores_get
    if _newclass:cores = _swig_property(_lsf.hostInfo_cores_get, _lsf.hostInfo_cores_set)
    __swig_setmethods__["hostAddr"] = _lsf.hostInfo_hostAddr_set
    __swig_getmethods__["hostAddr"] = _lsf.hostInfo_hostAddr_get
    if _newclass:hostAddr = _swig_property(_lsf.hostInfo_hostAddr_get, _lsf.hostInfo_hostAddr_set)
    __swig_setmethods__["pprocs"] = _lsf.hostInfo_pprocs_set
    __swig_getmethods__["pprocs"] = _lsf.hostInfo_pprocs_get
    if _newclass:pprocs = _swig_property(_lsf.hostInfo_pprocs_get, _lsf.hostInfo_pprocs_set)
    __swig_setmethods__["cores_per_proc"] = _lsf.hostInfo_cores_per_proc_set
    __swig_getmethods__["cores_per_proc"] = _lsf.hostInfo_cores_per_proc_get
    if _newclass:cores_per_proc = _swig_property(_lsf.hostInfo_cores_per_proc_get, _lsf.hostInfo_cores_per_proc_set)
    __swig_setmethods__["threads_per_core"] = _lsf.hostInfo_threads_per_core_set
    __swig_getmethods__["threads_per_core"] = _lsf.hostInfo_threads_per_core_get
    if _newclass:threads_per_core = _swig_property(_lsf.hostInfo_threads_per_core_get, _lsf.hostInfo_threads_per_core_set)
    __swig_setmethods__["top"] = _lsf.hostInfo_top_set
    __swig_getmethods__["top"] = _lsf.hostInfo_top_get
    if _newclass:top = _swig_property(_lsf.hostInfo_top_get, _lsf.hostInfo_top_set)
    __swig_setmethods__["jointime"] = _lsf.hostInfo_jointime_set
    __swig_getmethods__["jointime"] = _lsf.hostInfo_jointime_get
    if _newclass:jointime = _swig_property(_lsf.hostInfo_jointime_get, _lsf.hostInfo_jointime_set)
    def __init__(self): 
        this = _lsf.new_hostInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_hostInfo
    __del__ = lambda self : None
hostInfo_swigregister = _lsf.hostInfo_swigregister
hostInfo_swigregister(hostInfo)
cvar = _lsf.cvar
LSF_BASE_LIC = _lsf.LSF_BASE_LIC
LSF_BATCH_LIC_OBSOLETE = _lsf.LSF_BATCH_LIC_OBSOLETE
LSF_JS_SCHEDULER_LIC = _lsf.LSF_JS_SCHEDULER_LIC
LSF_JS_LIC = _lsf.LSF_JS_LIC
LSF_CLIENT_LIC = _lsf.LSF_CLIENT_LIC
LSF_MC_LIC = _lsf.LSF_MC_LIC
LSF_ANALYZER_SERVER_LIC = _lsf.LSF_ANALYZER_SERVER_LIC
LSF_EXPRESS_HPC_LIC = _lsf.LSF_EXPRESS_HPC_LIC
LSF_MAKE_LIC = _lsf.LSF_MAKE_LIC
LSF_PARALLEL_LIC = _lsf.LSF_PARALLEL_LIC
LSF_FLOAT_CLIENT_LIC = _lsf.LSF_FLOAT_CLIENT_LIC
LSF_FTA_LIC = _lsf.LSF_FTA_LIC
LSF_AFTER_HOURS_LIC = _lsf.LSF_AFTER_HOURS_LIC
LSF_RESOURCE_PREEMPT_LIC = _lsf.LSF_RESOURCE_PREEMPT_LIC
LSF_BACCT_LIC = _lsf.LSF_BACCT_LIC
LSF_STANDARD_LIC = _lsf.LSF_STANDARD_LIC
LSF_SCHED_FAIRSHARE_LIC = _lsf.LSF_SCHED_FAIRSHARE_LIC
LSF_SCHED_RESERVE_LIC = _lsf.LSF_SCHED_RESERVE_LIC
LSF_SCHED_PREEMPTION_LIC = _lsf.LSF_SCHED_PREEMPTION_LIC
LSF_SCHED_PARALLEL_LIC = _lsf.LSF_SCHED_PARALLEL_LIC
LSF_SCHED_ADVRSV_LIC = _lsf.LSF_SCHED_ADVRSV_LIC
LSF_API_CLIENT_LIC = _lsf.LSF_API_CLIENT_LIC
LSF_EXPRESS_LIC = _lsf.LSF_EXPRESS_LIC
CLUSTERWARE_MANAGER_LIC = _lsf.CLUSTERWARE_MANAGER_LIC
LSF_MANAGER_LIC = _lsf.LSF_MANAGER_LIC
LSF_PCC_HPC_LIC = _lsf.LSF_PCC_HPC_LIC
sCLUSTERWARE_LIC = _lsf.sCLUSTERWARE_LIC
LSF_ADVANCED_LIC = _lsf.LSF_ADVANCED_LIC
OTTAWA_MANAGER_LIC = _lsf.OTTAWA_MANAGER_LIC
SYMPHONY_MANAGER_ONLINE_LIC = _lsf.SYMPHONY_MANAGER_ONLINE_LIC
SYMPHONY_MANAGER_BATCH_LIC = _lsf.SYMPHONY_MANAGER_BATCH_LIC
PLATFORM_LSFXL = _lsf.PLATFORM_LSFXL
LSF_DUALCORE_X86_LIC = _lsf.LSF_DUALCORE_X86_LIC
LSF_SSCHED_LIC = _lsf.LSF_SSCHED_LIC
LSF_WORKGROUP_LIC = _lsf.LSF_WORKGROUP_LIC
LSF_NUM_LIC_TYPE = _lsf.LSF_NUM_LIC_TYPE
LSF_WG_NUM_LIC_TYPE = _lsf.LSF_WG_NUM_LIC_TYPE
LSF_NO_NEED_LIC = _lsf.LSF_NO_NEED_LIC
INET6_ADDRSTRLEN = _lsf.INET6_ADDRSTRLEN

PRODUCT_ALL = _lsf.PRODUCT_ALL
PRODUCT_LSF = _lsf.PRODUCT_LSF
PRODUCT_SYMPHONY = _lsf.PRODUCT_SYMPHONY
PRODUCT_PCM = _lsf.PRODUCT_PCM
PRODUCT_PRS = _lsf.PRODUCT_PRS
PRODUCT_ASC = _lsf.PRODUCT_ASC
PRODUCT_EGO = _lsf.PRODUCT_EGO
PRODUCT_CONDUCTOR = _lsf.PRODUCT_CONDUCTOR
PRODUCT_NUM = _lsf.PRODUCT_NUM
class entitlementInfoRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entitlementInfoRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entitlementInfoRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["product"] = _lsf.entitlementInfoRequest_product_set
    __swig_getmethods__["product"] = _lsf.entitlementInfoRequest_product_get
    if _newclass:product = _swig_property(_lsf.entitlementInfoRequest_product_get, _lsf.entitlementInfoRequest_product_set)
    def __init__(self): 
        this = _lsf.new_entitlementInfoRequest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_entitlementInfoRequest
    __del__ = lambda self : None
entitlementInfoRequest_swigregister = _lsf.entitlementInfoRequest_swigregister
entitlementInfoRequest_swigregister(entitlementInfoRequest)

class entitlementInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entitlementInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entitlementInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _lsf.entitlementInfo_name_set
    __swig_getmethods__["name"] = _lsf.entitlementInfo_name_get
    if _newclass:name = _swig_property(_lsf.entitlementInfo_name_get, _lsf.entitlementInfo_name_set)
    __swig_setmethods__["version"] = _lsf.entitlementInfo_version_set
    __swig_getmethods__["version"] = _lsf.entitlementInfo_version_get
    if _newclass:version = _swig_property(_lsf.entitlementInfo_version_get, _lsf.entitlementInfo_version_set)
    __swig_setmethods__["expiry"] = _lsf.entitlementInfo_expiry_set
    __swig_getmethods__["expiry"] = _lsf.entitlementInfo_expiry_get
    if _newclass:expiry = _swig_property(_lsf.entitlementInfo_expiry_get, _lsf.entitlementInfo_expiry_set)
    __swig_setmethods__["number"] = _lsf.entitlementInfo_number_set
    __swig_getmethods__["number"] = _lsf.entitlementInfo_number_get
    if _newclass:number = _swig_property(_lsf.entitlementInfo_number_get, _lsf.entitlementInfo_number_set)
    __swig_setmethods__["used"] = _lsf.entitlementInfo_used_set
    __swig_getmethods__["used"] = _lsf.entitlementInfo_used_get
    if _newclass:used = _swig_property(_lsf.entitlementInfo_used_get, _lsf.entitlementInfo_used_set)
    __swig_setmethods__["restrictions"] = _lsf.entitlementInfo_restrictions_set
    __swig_getmethods__["restrictions"] = _lsf.entitlementInfo_restrictions_get
    if _newclass:restrictions = _swig_property(_lsf.entitlementInfo_restrictions_get, _lsf.entitlementInfo_restrictions_set)
    __swig_setmethods__["misc"] = _lsf.entitlementInfo_misc_set
    __swig_getmethods__["misc"] = _lsf.entitlementInfo_misc_get
    if _newclass:misc = _swig_property(_lsf.entitlementInfo_misc_get, _lsf.entitlementInfo_misc_set)
    __swig_setmethods__["infoString"] = _lsf.entitlementInfo_infoString_set
    __swig_getmethods__["infoString"] = _lsf.entitlementInfo_infoString_get
    if _newclass:infoString = _swig_property(_lsf.entitlementInfo_infoString_get, _lsf.entitlementInfo_infoString_set)
    __swig_setmethods__["entitled"] = _lsf.entitlementInfo_entitled_set
    __swig_getmethods__["entitled"] = _lsf.entitlementInfo_entitled_get
    if _newclass:entitled = _swig_property(_lsf.entitlementInfo_entitled_get, _lsf.entitlementInfo_entitled_set)
    __swig_setmethods__["entitledDesc"] = _lsf.entitlementInfo_entitledDesc_set
    __swig_getmethods__["entitledDesc"] = _lsf.entitlementInfo_entitledDesc_get
    if _newclass:entitledDesc = _swig_property(_lsf.entitlementInfo_entitledDesc_get, _lsf.entitlementInfo_entitledDesc_set)
    def __init__(self): 
        this = _lsf.new_entitlementInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_entitlementInfo
    __del__ = lambda self : None
entitlementInfo_swigregister = _lsf.entitlementInfo_swigregister
entitlementInfo_swigregister(entitlementInfo)

class entitlementInfoReply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entitlementInfoReply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entitlementInfoReply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["errCode"] = _lsf.entitlementInfoReply_errCode_set
    __swig_getmethods__["errCode"] = _lsf.entitlementInfoReply_errCode_get
    if _newclass:errCode = _swig_property(_lsf.entitlementInfoReply_errCode_get, _lsf.entitlementInfoReply_errCode_set)
    __swig_setmethods__["clName"] = _lsf.entitlementInfoReply_clName_set
    __swig_getmethods__["clName"] = _lsf.entitlementInfoReply_clName_get
    if _newclass:clName = _swig_property(_lsf.entitlementInfoReply_clName_get, _lsf.entitlementInfoReply_clName_set)
    __swig_setmethods__["masterName"] = _lsf.entitlementInfoReply_masterName_set
    __swig_getmethods__["masterName"] = _lsf.entitlementInfoReply_masterName_get
    if _newclass:masterName = _swig_property(_lsf.entitlementInfoReply_masterName_get, _lsf.entitlementInfoReply_masterName_set)
    __swig_setmethods__["buildDate"] = _lsf.entitlementInfoReply_buildDate_set
    __swig_getmethods__["buildDate"] = _lsf.entitlementInfoReply_buildDate_get
    if _newclass:buildDate = _swig_property(_lsf.entitlementInfoReply_buildDate_get, _lsf.entitlementInfoReply_buildDate_set)
    __swig_setmethods__["additionalInfo"] = _lsf.entitlementInfoReply_additionalInfo_set
    __swig_getmethods__["additionalInfo"] = _lsf.entitlementInfoReply_additionalInfo_get
    if _newclass:additionalInfo = _swig_property(_lsf.entitlementInfoReply_additionalInfo_get, _lsf.entitlementInfoReply_additionalInfo_set)
    __swig_setmethods__["nEntitlements"] = _lsf.entitlementInfoReply_nEntitlements_set
    __swig_getmethods__["nEntitlements"] = _lsf.entitlementInfoReply_nEntitlements_get
    if _newclass:nEntitlements = _swig_property(_lsf.entitlementInfoReply_nEntitlements_get, _lsf.entitlementInfoReply_nEntitlements_set)
    __swig_setmethods__["entitlements"] = _lsf.entitlementInfoReply_entitlements_set
    __swig_getmethods__["entitlements"] = _lsf.entitlementInfoReply_entitlements_get
    if _newclass:entitlements = _swig_property(_lsf.entitlementInfoReply_entitlements_get, _lsf.entitlementInfoReply_entitlements_set)
    __swig_setmethods__["nAddons"] = _lsf.entitlementInfoReply_nAddons_set
    __swig_getmethods__["nAddons"] = _lsf.entitlementInfoReply_nAddons_get
    if _newclass:nAddons = _swig_property(_lsf.entitlementInfoReply_nAddons_get, _lsf.entitlementInfoReply_nAddons_set)
    __swig_setmethods__["addons"] = _lsf.entitlementInfoReply_addons_set
    __swig_getmethods__["addons"] = _lsf.entitlementInfoReply_addons_get
    if _newclass:addons = _swig_property(_lsf.entitlementInfoReply_addons_get, _lsf.entitlementInfoReply_addons_set)
    def __init__(self): 
        this = _lsf.new_entitlementInfoReply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_entitlementInfoReply
    __del__ = lambda self : None
entitlementInfoReply_swigregister = _lsf.entitlementInfoReply_swigregister
entitlementInfoReply_swigregister(entitlementInfoReply)

class config_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["paramName"] = _lsf.config_param_paramName_set
    __swig_getmethods__["paramName"] = _lsf.config_param_paramName_get
    if _newclass:paramName = _swig_property(_lsf.config_param_paramName_get, _lsf.config_param_paramName_set)
    __swig_setmethods__["paramValue"] = _lsf.config_param_paramValue_set
    __swig_getmethods__["paramValue"] = _lsf.config_param_paramValue_get
    if _newclass:paramValue = _swig_property(_lsf.config_param_paramValue_get, _lsf.config_param_paramValue_set)
    def __init__(self): 
        this = _lsf.new_config_param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsf.delete_config_param
    __del__ = lambda self : None
config_param_swigregister = _lsf.config_param_swigregister
config_param_swigregister(config_param)

class lsfRusage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsfRusage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsfRusage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ru_utime"] = _lsf.lsfRusage_ru_utime_set
    __swig_getmethods__["ru_utime"] = _lsf.lsfRusage_ru_utime_get
    if _newclass:ru_utime = _swig_property(_lsf.lsfRusage_ru_utime_get, _lsf.lsfRusage_ru_utime_set)
    __swig_setmethods__["ru_stime"] = _lsf.lsfRusage_ru_stime_set
    __swig_getmethods__["ru_stime"] = _lsf.lsfRusage_ru_stime_get
    if _newclass:ru_stime = _swig_property(_lsf.lsfRusage_ru_stime_get, _lsf.lsfRusage_ru_stime_set)
    __swig_setmethods__["ru_maxrss"] = _lsf.lsfRusage_ru_maxrss_set
    __swig_getmethods__["ru_maxrss"] = _lsf.lsfRusage_ru_maxrss_get
    if _newclass:ru_maxrss = _swig_property(_lsf.lsfRusage_ru_maxrss_get, _lsf.lsfRusage_ru_maxrss_set)
    __swig_setmethods__["ru_ixrss"] = _lsf.lsfRusage_ru_ixrss_set
    __swig_getmethods__["ru_ixrss"] = _lsf.lsfRusage_ru_ixrss_get
    if _newclass:ru_ixrss = _swig_property(_lsf.lsfRusage_ru_ixrss_get, _lsf.lsfRusage_ru_ixrss_set)
    __swig_setmethods__["ru_ismrss"] = _lsf.lsfRusage_ru_ismrss_set
    __swig_getmethods__["ru_ismrss"] = _lsf.lsfRusage_ru_ismrss_get
    if _newclass:ru_ismrss = _swig_property(_lsf.lsfRusage_ru_ismrss_get, _lsf.lsfRusage_ru_ismrss_set)
    __swig_setmethods__["ru_idrss"] = _lsf.lsfRusage_ru_idrss_set
    __swig_getmethods__["ru_idrss"] = _lsf.lsfRusage_ru_idrss_get
    if _newclass:ru_idrss = _swig_property(_lsf.lsfRusage_ru_idrss_get, _lsf.lsfRusage_ru_idrss_set)
    __swig_setmethods__["ru_isrss"] = _lsf.lsfRusage_ru_isrss_set
    __swig_getmethods__["ru_isrss"] = _lsf.lsfRusage_ru_isrss_get
    if _newclass:ru_isrss = _swig_property(_lsf.lsfRusage_ru_isrss_get, _lsf.lsfRusage_ru_isrss_set)
    __swig_setmethods__["ru_minflt"] = _lsf.lsfRusage_ru_minflt_set
    __swig_getmethods__["ru_minflt"] = _lsf.lsfRusage_ru_minflt_get
    if _newclass:ru_minflt = _swig_property(_lsf.lsfRusage_ru_minflt_get, _lsf.lsfRusage_ru_minflt_set)
    __swig_setmethods__["ru_majflt"] = _lsf.lsfRusage_ru_majflt_set
    __swig_getmethods__["ru_majflt"] = _lsf.lsfRusage_ru_majflt_get
    if _newclass:ru_majflt = _swig_property(_lsf.lsfRusage_ru_majflt_get, _lsf.lsfRusage_ru_majflt_set)
    __swig_setmethods__["ru_nswap"] = _lsf.lsfRusage_ru_nswap_set
    __swig_getmethods__["ru_nswap"] = _lsf.lsfRusage_ru_nswap_get
    if _newclass:ru_nswap = _swig_property(_lsf.lsfRusage_ru_nswap_get, _lsf.lsfRusage_ru_nswap_set)
    __swig_setmethods__["ru_inblock"] = _lsf.lsfRusage_ru_inblock_set
    __swig_getmethods__["ru_inblock"] = _lsf.lsfRusage_ru_inblock_get
    if _newclass:ru_inblock = _swig_property(_lsf.lsfRusage_ru_inblock_get, _lsf.lsfRusage_ru_inblock_set)
    __swig_setmethods__["ru_oublock"] = _lsf.lsfRusage_ru_oublock_set
    __swig_getmethods__["ru_oublock"] = _lsf.lsfRusage_ru_oublock_get
    if _newclass:ru_oublock = _swig_property(_lsf.lsfRusage_ru_oublock_get, _lsf.lsfRusage_ru_oublock_set)
    __swig_setmethods__["ru_ioch"] = _lsf.lsfRusage_ru_ioch_set
    __swig_getmethods__["ru_ioch"] = _lsf.lsfRusage_ru_ioch_get
    if _newclass:ru_ioch = _swig_property(_lsf.lsfRusage_ru_ioch_get, _lsf.lsfRusage_ru_ioch_set)
    __swig_setmethods__["ru_msgsnd"] = _lsf.lsfRusage_ru_msgsnd_set
    __swig_getmethods__["ru_msgsnd"] = _lsf.lsfRusage_ru_msgsnd_get
    if _newclass:ru_msgsnd = _swig_property(_lsf.lsfRusage_ru_msgsnd_get, _lsf.lsfRusage_ru_msgsnd_set)
    __swig_setmethods__["ru_msgrcv"] = _lsf.lsfRusage_ru_msgrcv_set
    __swig_getmethods__["ru_msgrcv"] = _lsf.lsfRusage_ru_msgrcv_get
    if _newclass:ru_msgrcv = _swig_property(_lsf.lsfRusage_ru_msgrcv_get, _lsf.lsfRusage_ru_msgrcv_set)
    __swig_setmethods__["ru_nsignals"] = _lsf.lsfRusage_ru_nsignals_set
    __swig_getmethods__["ru_nsignals"] = _lsf.lsfRusage_ru_nsignals_get
    if _newclass:ru_nsignals = _swig_property(_lsf.lsfRusage_ru_nsignals_get, _lsf.lsfRusage_ru_nsignals_set)
    __swig_setmethods__["ru_nvcsw"] = _lsf.lsfRusage_ru_nvcsw_set
    __swig_getmethods__["ru_nvcsw"] = _lsf.lsfRusage_ru_nvcsw_get
    if _newclass:ru_nvcsw = _swig_property(_lsf.lsfRusage_ru_nvcsw_get, _lsf.lsfRusage_ru_nvcsw_set)
    __swig_setmethods__["ru_nivcsw"] = _lsf.lsfRusage_ru_nivcsw_set
    __swig_getmethods__["ru_nivcsw"] = _lsf.lsfRusage_ru_nivcsw_get
    if _newclass:ru_nivcsw = _swig_property(_lsf.lsfRusage_ru_nivcsw_get, _lsf.lsfRusage_ru_nivcsw_set)
    __swig_setmethods__["ru_exutime"] = _lsf.lsfRusage_ru_exutime_set
    __swig_ge
